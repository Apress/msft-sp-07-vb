'------------------------------------------------------------------------------
' <auto-generated>
'     This code was generated by a tool.
'     Runtime Version:2.0.50727.42
'
'     Changes to this file may cause incorrect behavior and will be lost if
'     the code is regenerated.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On

Imports System
Imports System.ComponentModel
Imports System.Diagnostics
Imports System.Web.Services
Imports System.Web.Services.Protocols
Imports System.Xml.Serialization

'
'This source code was auto-generated by Microsoft.VSDesigner, Version 2.0.50727.42.
'
Namespace ExcelWebServices
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.42"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code"),  _
     System.Web.Services.WebServiceBindingAttribute(Name:="ExcelServiceSoap", [Namespace]:="http://schemas.microsoft.com/office/excel/server/webservices"),  _
     System.Xml.Serialization.XmlIncludeAttribute(GetType(TypeExporter)),  _
     System.Xml.Serialization.XmlIncludeAttribute(GetType(Object()))>  _
    Partial Public Class ExcelService
        Inherits System.Web.Services.Protocols.SoapHttpClientProtocol
        
        Private GetApiVersionOperationCompleted As System.Threading.SendOrPostCallback
        
        Private OpenWorkbookOperationCompleted As System.Threading.SendOrPostCallback
        
        Private CloseWorkbookOperationCompleted As System.Threading.SendOrPostCallback
        
        Private RefreshOperationCompleted As System.Threading.SendOrPostCallback
        
        Private CalculateOperationCompleted As System.Threading.SendOrPostCallback
        
        Private CalculateA1OperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetRangeOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetRangeA1OperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetCellOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetCellA1OperationCompleted As System.Threading.SendOrPostCallback
        
        Private SetRangeOperationCompleted As System.Threading.SendOrPostCallback
        
        Private SetRangeA1OperationCompleted As System.Threading.SendOrPostCallback
        
        Private SetCellOperationCompleted As System.Threading.SendOrPostCallback
        
        Private SetCellA1OperationCompleted As System.Threading.SendOrPostCallback
        
        Private CalculateWorkbookOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetSessionInformationOperationCompleted As System.Threading.SendOrPostCallback
        
        Private CancelRequestOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetWorkbookOperationCompleted As System.Threading.SendOrPostCallback
        
        Private useDefaultCredentialsSetExplicitly As Boolean
        
        '''<remarks/>
        Public Sub New()
            MyBase.New
            Me.Url = Global.MileageCalculator.My.MySettings.Default.MileageCalculator_ExcelWebServices_ExcelService
            If (Me.IsLocalFileSystemWebService(Me.Url) = true) Then
                Me.UseDefaultCredentials = true
                Me.useDefaultCredentialsSetExplicitly = false
            Else
                Me.useDefaultCredentialsSetExplicitly = true
            End If
        End Sub
        
        Public Shadows Property Url() As String
            Get
                Return MyBase.Url
            End Get
            Set
                If (((Me.IsLocalFileSystemWebService(MyBase.Url) = true)  _
                            AndAlso (Me.useDefaultCredentialsSetExplicitly = false))  _
                            AndAlso (Me.IsLocalFileSystemWebService(value) = false)) Then
                    MyBase.UseDefaultCredentials = false
                End If
                MyBase.Url = value
            End Set
        End Property
        
        Public Shadows Property UseDefaultCredentials() As Boolean
            Get
                Return MyBase.UseDefaultCredentials
            End Get
            Set
                MyBase.UseDefaultCredentials = value
                Me.useDefaultCredentialsSetExplicitly = true
            End Set
        End Property
        
        '''<remarks/>
        Public Event GetApiVersionCompleted As GetApiVersionCompletedEventHandler
        
        '''<remarks/>
        Public Event OpenWorkbookCompleted As OpenWorkbookCompletedEventHandler
        
        '''<remarks/>
        Public Event CloseWorkbookCompleted As CloseWorkbookCompletedEventHandler
        
        '''<remarks/>
        Public Event RefreshCompleted As RefreshCompletedEventHandler
        
        '''<remarks/>
        Public Event CalculateCompleted As CalculateCompletedEventHandler
        
        '''<remarks/>
        Public Event CalculateA1Completed As CalculateA1CompletedEventHandler
        
        '''<remarks/>
        Public Event GetRangeCompleted As GetRangeCompletedEventHandler
        
        '''<remarks/>
        Public Event GetRangeA1Completed As GetRangeA1CompletedEventHandler
        
        '''<remarks/>
        Public Event GetCellCompleted As GetCellCompletedEventHandler
        
        '''<remarks/>
        Public Event GetCellA1Completed As GetCellA1CompletedEventHandler
        
        '''<remarks/>
        Public Event SetRangeCompleted As SetRangeCompletedEventHandler
        
        '''<remarks/>
        Public Event SetRangeA1Completed As SetRangeA1CompletedEventHandler
        
        '''<remarks/>
        Public Event SetCellCompleted As SetCellCompletedEventHandler
        
        '''<remarks/>
        Public Event SetCellA1Completed As SetCellA1CompletedEventHandler
        
        '''<remarks/>
        Public Event CalculateWorkbookCompleted As CalculateWorkbookCompletedEventHandler
        
        '''<remarks/>
        Public Event GetSessionInformationCompleted As GetSessionInformationCompletedEventHandler
        
        '''<remarks/>
        Public Event CancelRequestCompleted As CancelRequestCompletedEventHandler
        
        '''<remarks/>
        Public Event GetWorkbookCompleted As GetWorkbookCompletedEventHandler
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://schemas.microsoft.com/office/excel/server/webservices/GetApiVersion", RequestNamespace:="http://schemas.microsoft.com/office/excel/server/webservices", ResponseNamespace:="http://schemas.microsoft.com/office/excel/server/webservices", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetApiVersion(ByRef status() As Status) As String
            Dim results() As Object = Me.Invoke("GetApiVersion", New Object(-1) {})
            status = CType(results(1),Status())
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetApiVersionAsync()
            Me.GetApiVersionAsync(Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetApiVersionAsync(ByVal userState As Object)
            If (Me.GetApiVersionOperationCompleted Is Nothing) Then
                Me.GetApiVersionOperationCompleted = AddressOf Me.OnGetApiVersionOperationCompleted
            End If
            Me.InvokeAsync("GetApiVersion", New Object(-1) {}, Me.GetApiVersionOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetApiVersionOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetApiVersionCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetApiVersionCompleted(Me, New GetApiVersionCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://schemas.microsoft.com/office/excel/server/webservices/OpenWorkbook", RequestNamespace:="http://schemas.microsoft.com/office/excel/server/webservices", ResponseNamespace:="http://schemas.microsoft.com/office/excel/server/webservices", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function OpenWorkbook(ByVal workbookPath As String, ByVal uiCultureName As String, ByVal dataCultureName As String, ByRef status() As Status) As String
            Dim results() As Object = Me.Invoke("OpenWorkbook", New Object() {workbookPath, uiCultureName, dataCultureName})
            status = CType(results(1),Status())
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub OpenWorkbookAsync(ByVal workbookPath As String, ByVal uiCultureName As String, ByVal dataCultureName As String)
            Me.OpenWorkbookAsync(workbookPath, uiCultureName, dataCultureName, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub OpenWorkbookAsync(ByVal workbookPath As String, ByVal uiCultureName As String, ByVal dataCultureName As String, ByVal userState As Object)
            If (Me.OpenWorkbookOperationCompleted Is Nothing) Then
                Me.OpenWorkbookOperationCompleted = AddressOf Me.OnOpenWorkbookOperationCompleted
            End If
            Me.InvokeAsync("OpenWorkbook", New Object() {workbookPath, uiCultureName, dataCultureName}, Me.OpenWorkbookOperationCompleted, userState)
        End Sub
        
        Private Sub OnOpenWorkbookOperationCompleted(ByVal arg As Object)
            If (Not (Me.OpenWorkbookCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent OpenWorkbookCompleted(Me, New OpenWorkbookCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://schemas.microsoft.com/office/excel/server/webservices/CloseWorkbook", RequestNamespace:="http://schemas.microsoft.com/office/excel/server/webservices", ResponseNamespace:="http://schemas.microsoft.com/office/excel/server/webservices", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function CloseWorkbook(ByVal sessionId As String) As <System.Xml.Serialization.XmlArrayAttribute("status")> Status()
            Dim results() As Object = Me.Invoke("CloseWorkbook", New Object() {sessionId})
            Return CType(results(0),Status())
        End Function
        
        '''<remarks/>
        Public Overloads Sub CloseWorkbookAsync(ByVal sessionId As String)
            Me.CloseWorkbookAsync(sessionId, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub CloseWorkbookAsync(ByVal sessionId As String, ByVal userState As Object)
            If (Me.CloseWorkbookOperationCompleted Is Nothing) Then
                Me.CloseWorkbookOperationCompleted = AddressOf Me.OnCloseWorkbookOperationCompleted
            End If
            Me.InvokeAsync("CloseWorkbook", New Object() {sessionId}, Me.CloseWorkbookOperationCompleted, userState)
        End Sub
        
        Private Sub OnCloseWorkbookOperationCompleted(ByVal arg As Object)
            If (Not (Me.CloseWorkbookCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent CloseWorkbookCompleted(Me, New CloseWorkbookCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://schemas.microsoft.com/office/excel/server/webservices/Refresh", RequestNamespace:="http://schemas.microsoft.com/office/excel/server/webservices", ResponseNamespace:="http://schemas.microsoft.com/office/excel/server/webservices", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function Refresh(ByVal sessionId As String, ByVal connectionName As String) As <System.Xml.Serialization.XmlArrayAttribute("status")> Status()
            Dim results() As Object = Me.Invoke("Refresh", New Object() {sessionId, connectionName})
            Return CType(results(0),Status())
        End Function
        
        '''<remarks/>
        Public Overloads Sub RefreshAsync(ByVal sessionId As String, ByVal connectionName As String)
            Me.RefreshAsync(sessionId, connectionName, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub RefreshAsync(ByVal sessionId As String, ByVal connectionName As String, ByVal userState As Object)
            If (Me.RefreshOperationCompleted Is Nothing) Then
                Me.RefreshOperationCompleted = AddressOf Me.OnRefreshOperationCompleted
            End If
            Me.InvokeAsync("Refresh", New Object() {sessionId, connectionName}, Me.RefreshOperationCompleted, userState)
        End Sub
        
        Private Sub OnRefreshOperationCompleted(ByVal arg As Object)
            If (Not (Me.RefreshCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent RefreshCompleted(Me, New RefreshCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://schemas.microsoft.com/office/excel/server/webservices/Calculate", RequestNamespace:="http://schemas.microsoft.com/office/excel/server/webservices", ResponseNamespace:="http://schemas.microsoft.com/office/excel/server/webservices", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function Calculate(ByVal sessionId As String, ByVal sheetName As String, ByVal rangeCoordinates As RangeCoordinates) As <System.Xml.Serialization.XmlArrayAttribute("status")> Status()
            Dim results() As Object = Me.Invoke("Calculate", New Object() {sessionId, sheetName, rangeCoordinates})
            Return CType(results(0),Status())
        End Function
        
        '''<remarks/>
        Public Overloads Sub CalculateAsync(ByVal sessionId As String, ByVal sheetName As String, ByVal rangeCoordinates As RangeCoordinates)
            Me.CalculateAsync(sessionId, sheetName, rangeCoordinates, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub CalculateAsync(ByVal sessionId As String, ByVal sheetName As String, ByVal rangeCoordinates As RangeCoordinates, ByVal userState As Object)
            If (Me.CalculateOperationCompleted Is Nothing) Then
                Me.CalculateOperationCompleted = AddressOf Me.OnCalculateOperationCompleted
            End If
            Me.InvokeAsync("Calculate", New Object() {sessionId, sheetName, rangeCoordinates}, Me.CalculateOperationCompleted, userState)
        End Sub
        
        Private Sub OnCalculateOperationCompleted(ByVal arg As Object)
            If (Not (Me.CalculateCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent CalculateCompleted(Me, New CalculateCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://schemas.microsoft.com/office/excel/server/webservices/CalculateA1", RequestNamespace:="http://schemas.microsoft.com/office/excel/server/webservices", ResponseNamespace:="http://schemas.microsoft.com/office/excel/server/webservices", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function CalculateA1(ByVal sessionId As String, ByVal sheetName As String, ByVal rangeName As String) As <System.Xml.Serialization.XmlArrayAttribute("status")> Status()
            Dim results() As Object = Me.Invoke("CalculateA1", New Object() {sessionId, sheetName, rangeName})
            Return CType(results(0),Status())
        End Function
        
        '''<remarks/>
        Public Overloads Sub CalculateA1Async(ByVal sessionId As String, ByVal sheetName As String, ByVal rangeName As String)
            Me.CalculateA1Async(sessionId, sheetName, rangeName, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub CalculateA1Async(ByVal sessionId As String, ByVal sheetName As String, ByVal rangeName As String, ByVal userState As Object)
            If (Me.CalculateA1OperationCompleted Is Nothing) Then
                Me.CalculateA1OperationCompleted = AddressOf Me.OnCalculateA1OperationCompleted
            End If
            Me.InvokeAsync("CalculateA1", New Object() {sessionId, sheetName, rangeName}, Me.CalculateA1OperationCompleted, userState)
        End Sub
        
        Private Sub OnCalculateA1OperationCompleted(ByVal arg As Object)
            If (Not (Me.CalculateA1CompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent CalculateA1Completed(Me, New CalculateA1CompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://schemas.microsoft.com/office/excel/server/webservices/GetRange", RequestNamespace:="http://schemas.microsoft.com/office/excel/server/webservices", ResponseNamespace:="http://schemas.microsoft.com/office/excel/server/webservices", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetRange(ByVal sessionId As String, ByVal sheetName As String, ByVal rangeCoordinates As RangeCoordinates, ByVal formatted As Boolean, ByRef status() As Status) As Object()
            Dim results() As Object = Me.Invoke("GetRange", New Object() {sessionId, sheetName, rangeCoordinates, formatted})
            status = CType(results(1),Status())
            Return CType(results(0),Object())
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetRangeAsync(ByVal sessionId As String, ByVal sheetName As String, ByVal rangeCoordinates As RangeCoordinates, ByVal formatted As Boolean)
            Me.GetRangeAsync(sessionId, sheetName, rangeCoordinates, formatted, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetRangeAsync(ByVal sessionId As String, ByVal sheetName As String, ByVal rangeCoordinates As RangeCoordinates, ByVal formatted As Boolean, ByVal userState As Object)
            If (Me.GetRangeOperationCompleted Is Nothing) Then
                Me.GetRangeOperationCompleted = AddressOf Me.OnGetRangeOperationCompleted
            End If
            Me.InvokeAsync("GetRange", New Object() {sessionId, sheetName, rangeCoordinates, formatted}, Me.GetRangeOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetRangeOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetRangeCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetRangeCompleted(Me, New GetRangeCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://schemas.microsoft.com/office/excel/server/webservices/GetRangeA1", RequestNamespace:="http://schemas.microsoft.com/office/excel/server/webservices", ResponseNamespace:="http://schemas.microsoft.com/office/excel/server/webservices", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetRangeA1(ByVal sessionId As String, ByVal sheetName As String, ByVal rangeName As String, ByVal formatted As Boolean, ByRef status() As Status) As Object()
            Dim results() As Object = Me.Invoke("GetRangeA1", New Object() {sessionId, sheetName, rangeName, formatted})
            status = CType(results(1),Status())
            Return CType(results(0),Object())
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetRangeA1Async(ByVal sessionId As String, ByVal sheetName As String, ByVal rangeName As String, ByVal formatted As Boolean)
            Me.GetRangeA1Async(sessionId, sheetName, rangeName, formatted, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetRangeA1Async(ByVal sessionId As String, ByVal sheetName As String, ByVal rangeName As String, ByVal formatted As Boolean, ByVal userState As Object)
            If (Me.GetRangeA1OperationCompleted Is Nothing) Then
                Me.GetRangeA1OperationCompleted = AddressOf Me.OnGetRangeA1OperationCompleted
            End If
            Me.InvokeAsync("GetRangeA1", New Object() {sessionId, sheetName, rangeName, formatted}, Me.GetRangeA1OperationCompleted, userState)
        End Sub
        
        Private Sub OnGetRangeA1OperationCompleted(ByVal arg As Object)
            If (Not (Me.GetRangeA1CompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetRangeA1Completed(Me, New GetRangeA1CompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://schemas.microsoft.com/office/excel/server/webservices/GetCell", RequestNamespace:="http://schemas.microsoft.com/office/excel/server/webservices", ResponseNamespace:="http://schemas.microsoft.com/office/excel/server/webservices", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetCell(ByVal sessionId As String, ByVal sheetName As String, ByVal row As Integer, ByVal column As Integer, ByVal formatted As Boolean, ByRef status() As Status) As Object
            Dim results() As Object = Me.Invoke("GetCell", New Object() {sessionId, sheetName, row, column, formatted})
            status = CType(results(1),Status())
            Return CType(results(0),Object)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetCellAsync(ByVal sessionId As String, ByVal sheetName As String, ByVal row As Integer, ByVal column As Integer, ByVal formatted As Boolean)
            Me.GetCellAsync(sessionId, sheetName, row, column, formatted, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetCellAsync(ByVal sessionId As String, ByVal sheetName As String, ByVal row As Integer, ByVal column As Integer, ByVal formatted As Boolean, ByVal userState As Object)
            If (Me.GetCellOperationCompleted Is Nothing) Then
                Me.GetCellOperationCompleted = AddressOf Me.OnGetCellOperationCompleted
            End If
            Me.InvokeAsync("GetCell", New Object() {sessionId, sheetName, row, column, formatted}, Me.GetCellOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetCellOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetCellCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetCellCompleted(Me, New GetCellCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://schemas.microsoft.com/office/excel/server/webservices/GetCellA1", RequestNamespace:="http://schemas.microsoft.com/office/excel/server/webservices", ResponseNamespace:="http://schemas.microsoft.com/office/excel/server/webservices", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetCellA1(ByVal sessionId As String, ByVal sheetName As String, ByVal rangeName As String, ByVal formatted As Boolean, ByRef status() As Status) As Object
            Dim results() As Object = Me.Invoke("GetCellA1", New Object() {sessionId, sheetName, rangeName, formatted})
            status = CType(results(1),Status())
            Return CType(results(0),Object)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetCellA1Async(ByVal sessionId As String, ByVal sheetName As String, ByVal rangeName As String, ByVal formatted As Boolean)
            Me.GetCellA1Async(sessionId, sheetName, rangeName, formatted, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetCellA1Async(ByVal sessionId As String, ByVal sheetName As String, ByVal rangeName As String, ByVal formatted As Boolean, ByVal userState As Object)
            If (Me.GetCellA1OperationCompleted Is Nothing) Then
                Me.GetCellA1OperationCompleted = AddressOf Me.OnGetCellA1OperationCompleted
            End If
            Me.InvokeAsync("GetCellA1", New Object() {sessionId, sheetName, rangeName, formatted}, Me.GetCellA1OperationCompleted, userState)
        End Sub
        
        Private Sub OnGetCellA1OperationCompleted(ByVal arg As Object)
            If (Not (Me.GetCellA1CompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetCellA1Completed(Me, New GetCellA1CompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://schemas.microsoft.com/office/excel/server/webservices/SetRange", RequestNamespace:="http://schemas.microsoft.com/office/excel/server/webservices", ResponseNamespace:="http://schemas.microsoft.com/office/excel/server/webservices", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function SetRange(ByVal sessionId As String, ByVal sheetName As String, ByVal rangeCoordinates As RangeCoordinates, ByVal rangeValues() As Object) As <System.Xml.Serialization.XmlArrayAttribute("status")> Status()
            Dim results() As Object = Me.Invoke("SetRange", New Object() {sessionId, sheetName, rangeCoordinates, rangeValues})
            Return CType(results(0),Status())
        End Function
        
        '''<remarks/>
        Public Overloads Sub SetRangeAsync(ByVal sessionId As String, ByVal sheetName As String, ByVal rangeCoordinates As RangeCoordinates, ByVal rangeValues() As Object)
            Me.SetRangeAsync(sessionId, sheetName, rangeCoordinates, rangeValues, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub SetRangeAsync(ByVal sessionId As String, ByVal sheetName As String, ByVal rangeCoordinates As RangeCoordinates, ByVal rangeValues() As Object, ByVal userState As Object)
            If (Me.SetRangeOperationCompleted Is Nothing) Then
                Me.SetRangeOperationCompleted = AddressOf Me.OnSetRangeOperationCompleted
            End If
            Me.InvokeAsync("SetRange", New Object() {sessionId, sheetName, rangeCoordinates, rangeValues}, Me.SetRangeOperationCompleted, userState)
        End Sub
        
        Private Sub OnSetRangeOperationCompleted(ByVal arg As Object)
            If (Not (Me.SetRangeCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent SetRangeCompleted(Me, New SetRangeCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://schemas.microsoft.com/office/excel/server/webservices/SetRangeA1", RequestNamespace:="http://schemas.microsoft.com/office/excel/server/webservices", ResponseNamespace:="http://schemas.microsoft.com/office/excel/server/webservices", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function SetRangeA1(ByVal sessionId As String, ByVal sheetName As String, ByVal rangeName As String, ByVal rangeValues() As Object) As <System.Xml.Serialization.XmlArrayAttribute("status")> Status()
            Dim results() As Object = Me.Invoke("SetRangeA1", New Object() {sessionId, sheetName, rangeName, rangeValues})
            Return CType(results(0),Status())
        End Function
        
        '''<remarks/>
        Public Overloads Sub SetRangeA1Async(ByVal sessionId As String, ByVal sheetName As String, ByVal rangeName As String, ByVal rangeValues() As Object)
            Me.SetRangeA1Async(sessionId, sheetName, rangeName, rangeValues, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub SetRangeA1Async(ByVal sessionId As String, ByVal sheetName As String, ByVal rangeName As String, ByVal rangeValues() As Object, ByVal userState As Object)
            If (Me.SetRangeA1OperationCompleted Is Nothing) Then
                Me.SetRangeA1OperationCompleted = AddressOf Me.OnSetRangeA1OperationCompleted
            End If
            Me.InvokeAsync("SetRangeA1", New Object() {sessionId, sheetName, rangeName, rangeValues}, Me.SetRangeA1OperationCompleted, userState)
        End Sub
        
        Private Sub OnSetRangeA1OperationCompleted(ByVal arg As Object)
            If (Not (Me.SetRangeA1CompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent SetRangeA1Completed(Me, New SetRangeA1CompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://schemas.microsoft.com/office/excel/server/webservices/SetCell", RequestNamespace:="http://schemas.microsoft.com/office/excel/server/webservices", ResponseNamespace:="http://schemas.microsoft.com/office/excel/server/webservices", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function SetCell(ByVal sessionId As String, ByVal sheetName As String, ByVal row As Integer, ByVal column As Integer, ByVal cellValue As Object) As <System.Xml.Serialization.XmlArrayAttribute("status")> Status()
            Dim results() As Object = Me.Invoke("SetCell", New Object() {sessionId, sheetName, row, column, cellValue})
            Return CType(results(0),Status())
        End Function
        
        '''<remarks/>
        Public Overloads Sub SetCellAsync(ByVal sessionId As String, ByVal sheetName As String, ByVal row As Integer, ByVal column As Integer, ByVal cellValue As Object)
            Me.SetCellAsync(sessionId, sheetName, row, column, cellValue, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub SetCellAsync(ByVal sessionId As String, ByVal sheetName As String, ByVal row As Integer, ByVal column As Integer, ByVal cellValue As Object, ByVal userState As Object)
            If (Me.SetCellOperationCompleted Is Nothing) Then
                Me.SetCellOperationCompleted = AddressOf Me.OnSetCellOperationCompleted
            End If
            Me.InvokeAsync("SetCell", New Object() {sessionId, sheetName, row, column, cellValue}, Me.SetCellOperationCompleted, userState)
        End Sub
        
        Private Sub OnSetCellOperationCompleted(ByVal arg As Object)
            If (Not (Me.SetCellCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent SetCellCompleted(Me, New SetCellCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://schemas.microsoft.com/office/excel/server/webservices/SetCellA1", RequestNamespace:="http://schemas.microsoft.com/office/excel/server/webservices", ResponseNamespace:="http://schemas.microsoft.com/office/excel/server/webservices", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function SetCellA1(ByVal sessionId As String, ByVal sheetName As String, ByVal rangeName As String, ByVal cellValue As Object) As <System.Xml.Serialization.XmlArrayAttribute("status")> Status()
            Dim results() As Object = Me.Invoke("SetCellA1", New Object() {sessionId, sheetName, rangeName, cellValue})
            Return CType(results(0),Status())
        End Function
        
        '''<remarks/>
        Public Overloads Sub SetCellA1Async(ByVal sessionId As String, ByVal sheetName As String, ByVal rangeName As String, ByVal cellValue As Object)
            Me.SetCellA1Async(sessionId, sheetName, rangeName, cellValue, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub SetCellA1Async(ByVal sessionId As String, ByVal sheetName As String, ByVal rangeName As String, ByVal cellValue As Object, ByVal userState As Object)
            If (Me.SetCellA1OperationCompleted Is Nothing) Then
                Me.SetCellA1OperationCompleted = AddressOf Me.OnSetCellA1OperationCompleted
            End If
            Me.InvokeAsync("SetCellA1", New Object() {sessionId, sheetName, rangeName, cellValue}, Me.SetCellA1OperationCompleted, userState)
        End Sub
        
        Private Sub OnSetCellA1OperationCompleted(ByVal arg As Object)
            If (Not (Me.SetCellA1CompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent SetCellA1Completed(Me, New SetCellA1CompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://schemas.microsoft.com/office/excel/server/webservices/CalculateWorkbook", RequestNamespace:="http://schemas.microsoft.com/office/excel/server/webservices", ResponseNamespace:="http://schemas.microsoft.com/office/excel/server/webservices", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function CalculateWorkbook(ByVal sessionId As String, ByVal calculateType As CalculateType) As <System.Xml.Serialization.XmlArrayAttribute("status")> Status()
            Dim results() As Object = Me.Invoke("CalculateWorkbook", New Object() {sessionId, calculateType})
            Return CType(results(0),Status())
        End Function
        
        '''<remarks/>
        Public Overloads Sub CalculateWorkbookAsync(ByVal sessionId As String, ByVal calculateType As CalculateType)
            Me.CalculateWorkbookAsync(sessionId, calculateType, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub CalculateWorkbookAsync(ByVal sessionId As String, ByVal calculateType As CalculateType, ByVal userState As Object)
            If (Me.CalculateWorkbookOperationCompleted Is Nothing) Then
                Me.CalculateWorkbookOperationCompleted = AddressOf Me.OnCalculateWorkbookOperationCompleted
            End If
            Me.InvokeAsync("CalculateWorkbook", New Object() {sessionId, calculateType}, Me.CalculateWorkbookOperationCompleted, userState)
        End Sub
        
        Private Sub OnCalculateWorkbookOperationCompleted(ByVal arg As Object)
            If (Not (Me.CalculateWorkbookCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent CalculateWorkbookCompleted(Me, New CalculateWorkbookCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://schemas.microsoft.com/office/excel/server/webservices/GetSessionInformatio"& _ 
            "n", RequestNamespace:="http://schemas.microsoft.com/office/excel/server/webservices", ResponseNamespace:="http://schemas.microsoft.com/office/excel/server/webservices", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetSessionInformation(ByVal sessionId As String, ByRef uiCultureNameUsed As String, ByRef dataCultureNameUsed As String, ByRef status() As Status) As <System.Xml.Serialization.XmlElementAttribute("serverVersion")> String
            Dim results() As Object = Me.Invoke("GetSessionInformation", New Object() {sessionId})
            uiCultureNameUsed = CType(results(1),String)
            dataCultureNameUsed = CType(results(2),String)
            status = CType(results(3),Status())
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetSessionInformationAsync(ByVal sessionId As String)
            Me.GetSessionInformationAsync(sessionId, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetSessionInformationAsync(ByVal sessionId As String, ByVal userState As Object)
            If (Me.GetSessionInformationOperationCompleted Is Nothing) Then
                Me.GetSessionInformationOperationCompleted = AddressOf Me.OnGetSessionInformationOperationCompleted
            End If
            Me.InvokeAsync("GetSessionInformation", New Object() {sessionId}, Me.GetSessionInformationOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetSessionInformationOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetSessionInformationCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetSessionInformationCompleted(Me, New GetSessionInformationCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://schemas.microsoft.com/office/excel/server/webservices/CancelRequest", RequestNamespace:="http://schemas.microsoft.com/office/excel/server/webservices", ResponseNamespace:="http://schemas.microsoft.com/office/excel/server/webservices", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function CancelRequest(ByVal sessionId As String) As <System.Xml.Serialization.XmlArrayAttribute("status")> Status()
            Dim results() As Object = Me.Invoke("CancelRequest", New Object() {sessionId})
            Return CType(results(0),Status())
        End Function
        
        '''<remarks/>
        Public Overloads Sub CancelRequestAsync(ByVal sessionId As String)
            Me.CancelRequestAsync(sessionId, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub CancelRequestAsync(ByVal sessionId As String, ByVal userState As Object)
            If (Me.CancelRequestOperationCompleted Is Nothing) Then
                Me.CancelRequestOperationCompleted = AddressOf Me.OnCancelRequestOperationCompleted
            End If
            Me.InvokeAsync("CancelRequest", New Object() {sessionId}, Me.CancelRequestOperationCompleted, userState)
        End Sub
        
        Private Sub OnCancelRequestOperationCompleted(ByVal arg As Object)
            If (Not (Me.CancelRequestCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent CancelRequestCompleted(Me, New CancelRequestCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://schemas.microsoft.com/office/excel/server/webservices/GetWorkbook", RequestNamespace:="http://schemas.microsoft.com/office/excel/server/webservices", ResponseNamespace:="http://schemas.microsoft.com/office/excel/server/webservices", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetWorkbook(ByVal sessionId As String, ByVal workbookType As WorkbookType, ByRef status() As Status) As <System.Xml.Serialization.XmlElementAttribute(DataType:="base64Binary")> Byte()
            Dim results() As Object = Me.Invoke("GetWorkbook", New Object() {sessionId, workbookType})
            status = CType(results(1),Status())
            Return CType(results(0),Byte())
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetWorkbookAsync(ByVal sessionId As String, ByVal workbookType As WorkbookType)
            Me.GetWorkbookAsync(sessionId, workbookType, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetWorkbookAsync(ByVal sessionId As String, ByVal workbookType As WorkbookType, ByVal userState As Object)
            If (Me.GetWorkbookOperationCompleted Is Nothing) Then
                Me.GetWorkbookOperationCompleted = AddressOf Me.OnGetWorkbookOperationCompleted
            End If
            Me.InvokeAsync("GetWorkbook", New Object() {sessionId, workbookType}, Me.GetWorkbookOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetWorkbookOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetWorkbookCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetWorkbookCompleted(Me, New GetWorkbookCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        Public Shadows Sub CancelAsync(ByVal userState As Object)
            MyBase.CancelAsync(userState)
        End Sub
        
        Private Function IsLocalFileSystemWebService(ByVal url As String) As Boolean
            If ((url Is Nothing)  _
                        OrElse (url Is String.Empty)) Then
                Return false
            End If
            Dim wsUri As System.Uri = New System.Uri(url)
            If ((wsUri.Port >= 1024)  _
                        AndAlso (String.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) = 0)) Then
                Return true
            End If
            Return false
        End Function
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "2.0.50727.42"),  _
     System.SerializableAttribute(),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code"),  _
     System.Xml.Serialization.XmlTypeAttribute([Namespace]:="http://schemas.microsoft.com/office/excel/server/webservices")>  _
    Partial Public Class Status
        
        Private nameField As String
        
        Private severityField As String
        
        Private messageField As String
        
        '''<remarks/>
        Public Property Name() As String
            Get
                Return Me.nameField
            End Get
            Set
                Me.nameField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property Severity() As String
            Get
                Return Me.severityField
            End Get
            Set
                Me.severityField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property Message() As String
            Get
                Return Me.messageField
            End Get
            Set
                Me.messageField = value
            End Set
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "2.0.50727.42"),  _
     System.SerializableAttribute(),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code"),  _
     System.Xml.Serialization.XmlTypeAttribute([Namespace]:="http://schemas.microsoft.com/office/excel/server/webservices")>  _
    Partial Public Class TypeExporter
        
        Private cellErrorField As CellError
        
        '''<remarks/>
        Public Property CellError() As CellError
            Get
                Return Me.cellErrorField
            End Get
            Set
                Me.cellErrorField = value
            End Set
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "2.0.50727.42"),  _
     System.SerializableAttribute(),  _
     System.Xml.Serialization.XmlTypeAttribute([Namespace]:="http://schemas.microsoft.com/office/excel/server/webservices")>  _
    Public Enum CellError
        
        '''<remarks/>
        Div0
        
        '''<remarks/>
        NA
        
        '''<remarks/>
        Name
        
        '''<remarks/>
        Null
        
        '''<remarks/>
        Num
        
        '''<remarks/>
        Ref
        
        '''<remarks/>
        Value
    End Enum
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "2.0.50727.42"),  _
     System.SerializableAttribute(),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code"),  _
     System.Xml.Serialization.XmlTypeAttribute([Namespace]:="http://schemas.microsoft.com/office/excel/server/webservices")>  _
    Partial Public Class RangeCoordinates
        
        Private rowField As Integer
        
        Private columnField As Integer
        
        Private heightField As Integer
        
        Private widthField As Integer
        
        '''<remarks/>
        Public Property Row() As Integer
            Get
                Return Me.rowField
            End Get
            Set
                Me.rowField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property Column() As Integer
            Get
                Return Me.columnField
            End Get
            Set
                Me.columnField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property Height() As Integer
            Get
                Return Me.heightField
            End Get
            Set
                Me.heightField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property Width() As Integer
            Get
                Return Me.widthField
            End Get
            Set
                Me.widthField = value
            End Set
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "2.0.50727.42"),  _
     System.SerializableAttribute(),  _
     System.Xml.Serialization.XmlTypeAttribute([Namespace]:="http://schemas.microsoft.com/office/excel/server/webservices")>  _
    Public Enum CalculateType
        
        '''<remarks/>
        Recalculate
        
        '''<remarks/>
        CalculateFull
    End Enum
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "2.0.50727.42"),  _
     System.SerializableAttribute(),  _
     System.Xml.Serialization.XmlTypeAttribute([Namespace]:="http://schemas.microsoft.com/office/excel/server/webservices")>  _
    Public Enum WorkbookType
        
        '''<remarks/>
        FullWorkbook
        
        '''<remarks/>
        FullSnapshot
        
        '''<remarks/>
        PublishedItemsSnapshot
    End Enum
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.42")>  _
    Public Delegate Sub GetApiVersionCompletedEventHandler(ByVal sender As Object, ByVal e As GetApiVersionCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.42"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetApiVersionCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property status() As Status()
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),Status())
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.42")>  _
    Public Delegate Sub OpenWorkbookCompletedEventHandler(ByVal sender As Object, ByVal e As OpenWorkbookCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.42"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class OpenWorkbookCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property status() As Status()
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),Status())
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.42")>  _
    Public Delegate Sub CloseWorkbookCompletedEventHandler(ByVal sender As Object, ByVal e As CloseWorkbookCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.42"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class CloseWorkbookCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Status()
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Status())
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.42")>  _
    Public Delegate Sub RefreshCompletedEventHandler(ByVal sender As Object, ByVal e As RefreshCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.42"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class RefreshCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Status()
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Status())
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.42")>  _
    Public Delegate Sub CalculateCompletedEventHandler(ByVal sender As Object, ByVal e As CalculateCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.42"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class CalculateCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Status()
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Status())
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.42")>  _
    Public Delegate Sub CalculateA1CompletedEventHandler(ByVal sender As Object, ByVal e As CalculateA1CompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.42"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class CalculateA1CompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Status()
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Status())
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.42")>  _
    Public Delegate Sub GetRangeCompletedEventHandler(ByVal sender As Object, ByVal e As GetRangeCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.42"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetRangeCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Object()
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Object())
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property status() As Status()
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),Status())
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.42")>  _
    Public Delegate Sub GetRangeA1CompletedEventHandler(ByVal sender As Object, ByVal e As GetRangeA1CompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.42"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetRangeA1CompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Object()
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Object())
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property status() As Status()
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),Status())
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.42")>  _
    Public Delegate Sub GetCellCompletedEventHandler(ByVal sender As Object, ByVal e As GetCellCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.42"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetCellCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Object
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Object)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property status() As Status()
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),Status())
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.42")>  _
    Public Delegate Sub GetCellA1CompletedEventHandler(ByVal sender As Object, ByVal e As GetCellA1CompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.42"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetCellA1CompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Object
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Object)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property status() As Status()
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),Status())
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.42")>  _
    Public Delegate Sub SetRangeCompletedEventHandler(ByVal sender As Object, ByVal e As SetRangeCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.42"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class SetRangeCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Status()
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Status())
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.42")>  _
    Public Delegate Sub SetRangeA1CompletedEventHandler(ByVal sender As Object, ByVal e As SetRangeA1CompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.42"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class SetRangeA1CompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Status()
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Status())
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.42")>  _
    Public Delegate Sub SetCellCompletedEventHandler(ByVal sender As Object, ByVal e As SetCellCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.42"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class SetCellCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Status()
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Status())
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.42")>  _
    Public Delegate Sub SetCellA1CompletedEventHandler(ByVal sender As Object, ByVal e As SetCellA1CompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.42"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class SetCellA1CompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Status()
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Status())
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.42")>  _
    Public Delegate Sub CalculateWorkbookCompletedEventHandler(ByVal sender As Object, ByVal e As CalculateWorkbookCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.42"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class CalculateWorkbookCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Status()
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Status())
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.42")>  _
    Public Delegate Sub GetSessionInformationCompletedEventHandler(ByVal sender As Object, ByVal e As GetSessionInformationCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.42"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetSessionInformationCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property uiCultureNameUsed() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),String)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property dataCultureNameUsed() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(2),String)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property status() As Status()
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(3),Status())
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.42")>  _
    Public Delegate Sub CancelRequestCompletedEventHandler(ByVal sender As Object, ByVal e As CancelRequestCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.42"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class CancelRequestCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Status()
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Status())
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.42")>  _
    Public Delegate Sub GetWorkbookCompletedEventHandler(ByVal sender As Object, ByVal e As GetWorkbookCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.42"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetWorkbookCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Byte()
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Byte())
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property status() As Status()
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),Status())
            End Get
        End Property
    End Class
End Namespace
